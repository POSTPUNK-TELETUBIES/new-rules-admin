"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[23],{3482:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"technical-memory-pr-check","metadata":{"permalink":"/new-rules-admin/wiki/blog/technical-memory-pr-check","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-1-19-technical-memory-pr-check.md","source":"@site/blog/2024-1-19-technical-memory-pr-check.md","title":"Memoria t\xe9cnica de la verificaci\xf3n de n\xfamero de l\xedneas modificadas en el pull request","description":"1. Iniciar action workflow","date":"2024-01-19T00:00:00.000Z","formattedDate":"January 19, 2024","tags":[],"readingTime":3.81,"hasTruncateMarker":false,"authors":[{"name":"Jaen Figueroa","title":"Frontend Developer","url":"https://github.com/jaenfigueroa","imageURL":"https://avatars.githubusercontent.com/u/69079292?v=4","key":"jaenfigueroa"}],"frontMatter":{"slug":"technical-memory-pr-check","Title":"Memoria t\xe9cnica de la verificaci\xf3n de n\xfamero de l\xedneas modificadas en el pull request","authors":"jaenfigueroa"},"unlisted":false,"nextItem":{"title":"\xbfPor que se cambi\xf3 de probot a actions?","permalink":"/new-rules-admin/wiki/blog/probot-to-github-actions"}},"content":"## 1. Iniciar action workflow\\r\\n\\r\\n- Este archivo yml se ejecutar\xe1 la primera vez que se cree un nuevo pull request, tambi\xe9n cada vez que se actualize el pr\\r\\n- Damos los permisos de escritura\\r\\n- Designamos el entorno de ejecuci\xf3n\\r\\n- Declaramos las variables de entorno que vamos a usar para las tareas\\r\\n- Indicamos la versi\xf3n de actions que vamos a usar\\r\\n\\r\\n```yml\\r\\non:\\r\\n  pull_request:\\r\\n    branches: \'*\'\\r\\n\\r\\npermissions: write-all\\r\\n\\r\\njobs:\\r\\n  check_pr_size:\\r\\n    environment: dev\\r\\n    env:\\r\\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\\r\\n      MAX_LINES_PR: ${{ vars.MAX_LINES_PR || 600 }}\\r\\n      PR_COMMENTS_URL: ${{ github.event.pull_request.comments_url }}\\r\\n      PR_ADDITIONS: ${{ github.event.pull_request.additions }}\\r\\n      PR_DELETIONS: ${{ github.event.pull_request.deletions }}\\r\\n    runs-on: ubuntu-latest\\r\\n    steps:\\r\\n      - uses: actions/checkout@v2\\r\\n        with:\\r\\n          fetch-depth: 0\\r\\n\\r\\n      ... more tasks\\r\\n```\\r\\n\\r\\n## 2. Obtener el total de numero de l\xedneas cambiadas de todos los archivos de tipo lock\\r\\n\\r\\n- Tenemos un script que ejecuta `git diff --stat origin/NOMBRE_RAMA`, de donde vamos a obtener el numero de l\xedneas cambiadas de todos lo archivos de tipo lock\\r\\n- El resultado se guardar\xe1 dentro de una variable PR_MODIFY_LOCK, luego lo guardamos como una nueva variable de entorno\\r\\n\\r\\n```yml\\r\\n- name: Obtain the total number of modified lines of the lock files\\r\\n  env:\\r\\n    PR_DESTINATION_BRANCH: ${{ github.event.pull_request.base.ref }}\\r\\n  run: |\\r\\n    chmod +x bash-scripts/lines-of-lock.sh\\r\\n\\r\\n    PR_MODIFY_LOCK=$(bash-scripts/lines-of-lock.sh)\\r\\n\\r\\n    echo \\"PR_MODIFY_LOCK=${PR_MODIFY_LOCK}\\" >> $GITHUB_ENV\\r\\n```\\r\\n\\r\\n## 3. Calcular los valores para el reporte\\r\\n\\r\\n- Calculamos el numero de lienas editadas en total\\r\\n- Calculamos el numero de l\xedneas editadas sin contar el numero de l\xedneas editadas de tipo lock\\r\\n- Calculamos el numero de l\xedneas restantes\\r\\n- Finalmente los guardamos como nuevas variables de entorno\\r\\n\\r\\n```yml\\r\\n- name: Obtaining missing data for reporting purposes\\r\\n  run: |\\r\\n    PR_MODIFY_ALL=$(($PR_ADDITIONS + $PR_DELETIONS))\\r\\n    PR_MODIFY_REST=$(($PR_MODIFY_ALL - $PR_MODIFY_LOCK))\\r\\n\\r\\n    if [ $PR_MODIFY_REST -gt $MAX_LINES_PR ]; then\\r\\n        PR_EXTRA=$(($PR_MODIFY_REST - $MAX_LINES_PR))\\r\\n    else\\r\\n        PR_EXTRA=0\\r\\n    fi\\r\\n\\r\\n    echo \\"PR_MODIFY_ALL=${PR_MODIFY_ALL}\\" >> $GITHUB_ENV\\r\\n    echo \\"PR_MODIFY_REST=${PR_MODIFY_REST}\\" >> $GITHUB_ENV\\r\\n    echo \\"PR_EXTRA=${PR_EXTRA}\\" >> $GITHUB_ENV\\r\\n```\\r\\n\\r\\n## 4. Generar el mensaje que se va mostrar en el reporte\\r\\n\\r\\n- Primero generamos la nota, para el reporte\\r\\n- Usamos la plantilla que tenemos del reporte y haciendo uso de sed vamos a reemplazar las variables\\r\\n- Finamente guardamos el mensaje como una nueva variable de entorno\\r\\n\\r\\n```yml\\r\\n- name: Generate the message for commenting on the pr\\r\\n  run: |\\r\\n    if [[ $PR_MODIFY_REST -gt $MAX_LINES_PR ]]; then\\r\\n      NOTE=\\"@${{ github.actor }} Ups, tu pull request tiene m\xe1s de $MAX_LINES_PR l\xedneas modificadas, tienes un total de $PR_MODIFY_REST, considera dividir este pull request.\\"\\r\\n    else\\r\\n      NOTE=\\"Perfecto, el pull request no sobrepasa las $MAX_LINES_PR l\xedneas modificadas.\\"\\r\\n    fi\\r\\n\\r\\n    MESSAGE=$(sed \\\\\\r\\n        -e \':a;N;$!ba;s/\\\\r//g\' \\\\\\r\\n        -e \'s/\\\\n/\\\\\\\\n/g\' \\\\\\r\\n        -e \\"s/NOTE/$NOTE/\\" \\\\\\r\\n        -e \\"s/PR_ADDITIONS/$PR_ADDITIONS/\\" \\\\\\r\\n        -e \\"s/PR_DELETIONS/$PR_DELETIONS/\\" \\\\\\r\\n        -e \\"s/PR_MODIFY_ALL/$PR_MODIFY_ALL/\\" \\\\\\r\\n        -e \\"s/PR_MODIFY_LOCK/$PR_MODIFY_LOCK/\\" \\\\\\r\\n        -e \\"s/PR_MODIFY_REST/$PR_MODIFY_REST/\\" \\\\\\r\\n        -e \\"s/PR_EXTRA/$PR_EXTRA/\\" templates/pr-report.md)\\r\\n\\r\\n    echo \\"MESSAGE=${MESSAGE}\\" >> $GITHUB_ENV\\r\\n```\\r\\n\\r\\n## 5. Eliminar los reportes anteriores de los comentarios\\r\\n\\r\\n- Realizamos una petici\xf3n para obtener una lista de todos los comentarios\\r\\n- Filtramos la lista por los que contengan la frase \\"Resultados de la pre-revisi\xf3n del PR\\"\\r\\n- Obtenemos una lista de IDs de los comentarios restantes\\r\\n- Recorremos la lista para eliminar cada uno de ellos\\r\\n\\r\\n```yml\\r\\n- name: Remove previous reports from comments\\r\\n  run: |\\r\\n    COMMENTS=$(curl -L \\\\\\r\\n        -H \\"Accept: application/vnd.github+json\\" \\\\\\r\\n        -H \\"Authorization: token $GITHUB_TOKEN\\" \\\\\\r\\n        -H \\"X-GitHub-Api-Version: 2022-11-28\\" \\\\\\r\\n        $PR_COMMENTS_URL | jq \'.[] | select(.body | contains(\\"Resultados de la pre-revisi\xf3n del PR\\"))\')\\r\\n\\r\\n    COMMENTS_ID=$(echo \\"$COMMENTS\\" | jq -r \'.id\')\\r\\n\\r\\n    IFS=$\'\\\\n\'\\r\\n    for ID in $COMMENTS_ID; do\\r\\n\\r\\n        COMMENT_URL=\\"${{ github.api_url }}/repos/${{ github.repository }}/issues/comments/$ID\\"\\r\\n\\r\\n        curl -L \\\\\\r\\n            -X DELETE \\\\\\r\\n            -H \\"Accept: application/vnd.github+json\\" \\\\\\r\\n            -H \\"Authorization: token $GITHUB_TOKEN\\" \\\\\\r\\n            -H \\"X-GitHub-Api-Version: 2022-11-28\\" \\\\\\r\\n            $COMMENT_URL\\r\\n    done\\r\\n```\\r\\n\\r\\n## 6. Mostramos el reporte como comentario en el pull request\\r\\n\\r\\n- Realizamos una petici\xf3n para agregar el nuevo mensaje, enviando el mensaje que guardamos antes como una variable de entorno\\r\\n\\r\\n```yml\\r\\n- name: Shows the report as a comment in the pr\\r\\n  run: |\\r\\n    curl \\\\\\r\\n    -X POST \\\\\\r\\n    $PR_COMMENTS_URL \\\\\\r\\n    -H \\"Content-Type: application/json\\" \\\\\\r\\n    -H \\"Authorization: token $GITHUB_TOKEN\\" \\\\\\r\\n    --data \\"{ \\\\\\"body\\\\\\": \\\\\\"$MESSAGE\\\\\\" }\\"\\r\\n```\\r\\n\\r\\n## 7. Comprobar si la cantidad de l\xedneas modificadas no sobrepasa el limite\\r\\n\\r\\n- Comprobamos que el numero de l\xedneas modificadas no super\xe9 el limite establecido, en caso se super\xe9 el limite mostrar un error de tal manera que no permita realizar el merge, hasta que se realizen las modificaciones\\r\\n\\r\\n```yml\\r\\n- name: Stop the execution of the workflow if the limit of modified lines is exceeded.\\r\\n  run: |\\r\\n    if [[ $PR_MODIFY_REST -gt $MAX_LINES_PR ]]\\r\\n    then\\r\\n        echo \\"Warning - total lines changed is greater than\\" $MAX_LINES_PR.\\r\\n        echo \\"Please consider breaking this PR down.\\"\\r\\n        exit 1\\r\\n    fi\\r\\n```\\r\\n\\r\\n## 8. Resultados\\r\\n\\r\\n- Si el numero de l\xedneas modificadas no supera el limite establecido\\r\\n\\r\\n![image](./img/pr-report-ok.png)\\r\\n\\r\\n- Si el numero de l\xedneas modificadas supera el limite establecido\\r\\n\\r\\n![image](./img/pr-report-error.png)"},{"id":"probot-to-github-actions","metadata":{"permalink":"/new-rules-admin/wiki/blog/probot-to-github-actions","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-1-18-probot-to-github-actions.md","source":"@site/blog/2024-1-18-probot-to-github-actions.md","title":"\xbfPor que se cambi\xf3 de probot a actions?","description":"| Caracter\xedstica                                                  |                                                                      Probot                                                                      |                                                                                  Github actions                                                                                   |","date":"2024-01-18T00:00:00.000Z","formattedDate":"January 18, 2024","tags":[],"readingTime":1.685,"hasTruncateMarker":false,"authors":[{"name":"Jaen Figueroa","title":"Frontend Developer","url":"https://github.com/jaenfigueroa","imageURL":"https://avatars.githubusercontent.com/u/69079292?v=4","key":"jaenfigueroa"}],"frontMatter":{"slug":"probot-to-github-actions","Title":"\xbfPor que se cambi\xf3 de probot a actions?","authors":"jaenfigueroa"},"unlisted":false,"prevItem":{"title":"Memoria t\xe9cnica de la verificaci\xf3n de n\xfamero de l\xedneas modificadas en el pull request","permalink":"/new-rules-admin/wiki/blog/technical-memory-pr-check"},"nextItem":{"title":"Self-studying","permalink":"/new-rules-admin/wiki/blog/self-studying"}},"content":"| Caracter\xedstica                                                  |                                                                      Probot                                                                      |                                                                                  Github actions                                                                                   |\\r\\n| --------------------------------------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\\r\\n| Arquitectura y el entorno de ejecuci\xf3n                          |                                  Es un servidor de express que tiene que estar corriendoy trabajar con webhooks                                  |                                              Corre dentro de la misma infraestructura de github y tiene acceso al repo y sus secrets                                              |\\r\\n| Resiliencia y la capacidad de gesti\xf3n de fallos                 |                                 Implica que si se muere o hay un timeout en la respuesta perdemos funcionalidad                                  |  Implica que no hay timeout peligroso (6 horas m\xe1ximo) y que es parte de nuestro de nuestro CI/CD, parte del repo y hasta reusable en la organizaci\xf3n, no necesita persistencia   |\\r\\n| Lenguage de programaci\xf3n                                        |                                                                    Javascript                                                                    |                                                      Usa YML con info de github y bash scripts, tambi\xe9n puede que use Docker                                                      |\\r\\n| Dificultad para los desarrolladores                             | Implica que es parte del stack de la mayoria de fronts conocen, se puede mantener y testear localmente, tambien tiene una api facil de programar | Implica que se tiene que conocer bash script y ademas comerse la curva de aprendizaje de github actions. No todos los fronts conocen de github y POSIX (menos Docker) complejidad |\\r\\n| Gesti\xf3n de dependencias y la complejidad de las pruebas locales |                                              Hay que bundlear (con node resolution) o usar commonjs                                              |                        Solo es un archivo de texto muy peque\xf1o, sin embargo si se quiere testear locamente necesitas un emulador (Nuevamente complejidad)                         |\\r\\n| Escalabilidad                                                   |                                            Escalabilidad limitada dependiendo del servidor de Express                                            |                                                 Escalabilidad alta y capacidad de manejar m\xfaltiples flujos de trabajo simult\xe1neos                                                 |\\r\\n| Soporte y Comunidad                                             |                                        Comunidad activa pero posiblemente menor que la de GitHub Actions                                         |                                                  Fuerte comunidad de GitHub Actions con amplios recursos y ejemplos disponibles                                                   |\\r\\n| Costos                                                          |                                    Puede requerir recursos adicionales para mantener el servidor en ejecuci\xf3n                                    |                                                 Integrado con GitHub, algunos minutos gratuitos, con posibles costos adicionales                                                  |\\r\\n| Flujos de trabajo complejos                                     |                                                   Limitados en comparaci\xf3n con GitHub Actions                                                    |                                                    Dise\xf1ado espec\xedficamente para flujos de trabajo complejos y personalizables                                                    |"},{"id":"self-studying","metadata":{"permalink":"/new-rules-admin/wiki/blog/self-studying","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-1-14-Self-studying.md","source":"@site/blog/2024-1-14-Self-studying.md","title":"Self-studying","description":"We should self-study if whe want to code.","date":"2024-01-14T00:00:00.000Z","formattedDate":"January 14, 2024","tags":[],"readingTime":7.61,"hasTruncateMarker":false,"authors":[{"name":"Piero Ramirez","title":"Full Stack Engineer","url":"https://github.com/Shadowrunner11","imageURL":"https://avatars.githubusercontent.com/u/77254647?v=4","key":"piero"}],"frontMatter":{"slug":"self-studying","title":"Self-studying","authors":"piero"},"unlisted":false,"prevItem":{"title":"\xbfPor que se cambi\xf3 de probot a actions?","permalink":"/new-rules-admin/wiki/blog/probot-to-github-actions"}},"content":"We should self-study if whe want to code.\\n\\nWhen someone assign us a task, there are sometimes when we actually do not know\\nhow to proceed but usually managers and POs want us to estimate the time\\nit would take.\\n\\nSo we throw a number and now there is a commitment to deliver the feat.\\nThe problem here is, we are very bad estimating by nature. Our brains\\nare very kind to future selfs (and among another things that is one of\\nthe reasons people procrastinate).\\n\\nLets explore a example; imagine that you are assigned to code a matrix comparison\\nthat resembles a spreadsheet table, dynamically changes the number of products (user can\\nadd or remove columns of products) it should have and the first column and row locked,\\nmeaning when you scroll down the header row should \\"stick\\" to the top. And in mobile view\\nshould support jus seeing two columns and maximum, and to see the rest, scroll should be\\nsupported as well.\\n\\n## Self-efficacy\\n\\nIf you have never done something like this before there is a high probability\\nto give up even before starting.\\n\\nIf you have done something similar but the attempt was not successful, is probable that you are\\ngoing to give it a solid try now, but maybe you would end givin up, although is less probable\\nthis time.\\n\\nNow, if your previous attempt of doing something similar was at some point successful,\\nthere is a good chance now you are going to do it better.\\n\\nBut, how can I ever gain self-efficacy if everything is always new?\\n\\n### Foundations\\n\\nIf you do have solid foundations about programming and computer science, like:\\n\\n- Knowing how to design algorithms\\n- Understating data structures\\n- Having a mental model about roles of variables\\n- Complexity of time and space\\n- Stack and heap memory allocation\\n- Profiling\\n\\nYou are going to be more confident on what you are doing. If you are a front end developer\\nyou may wonder \\"why the heck should I know all of this?\\".\\n\\n#### Non-functional requirements and bugs( a.k.a \\"but it works!, stop asking me for more\\")\\n\\nThis are those requirements like:\\n\\n- The web should load in less than 500 ms\\n- The comparison matrix should be SEO friendly, so no CSR please\\n- The page should point 90 or more in web vitals health\\n- If Java Script logic fail should not block the other components\' JS\\n- Should work in IE11 (yeah, there are some people using it to see our page, don\'t ask me why)\\n- Should work in a cellphone that has low specs (And other components of\\nthe page already have tons of js and there lots of JS scripts for monitoring\\nand business metrics running already)\\n- Non-critical css should be deferred\\n\\nMy, my, now is being kind of complicated to take all of this in account\\n\\nAnd about bugs?\\n\\n- Other components in the website are interacting with yours making it appear like a Picasso\'s\\n- There are shift layouts because of your css is interacting with previous css code\\n- Previous css code is overriding yours\\n- In the future will be more an more bugs because components continue changing\\nand people continue to add external scripts\\n\\nIf you are a front end dev, there are tools at your disposition that can help you to\\nkeep track of the performance of you application\\n\\nFor example in chromium based browsers there is a profiler monitor in real time\\nhow many shift layouts are happening, how much space is the JS heap taking, DOM\\nnodes, and etc. There is a heap/performance profiler too where you can record a session\\nand evaluate where there are problems in css and js. Also you can emulate a dispositive\\nwith low CPU capacity than yours (we are not giving your machine to the client,\\nremember those words?)\\n\\nIn addition to catch bugs there si a complete source inspector and debugger where you can,\\nwell, debug and create breakpoints.\\n\\nNeat, right? Yeah but, when problems encountered, do you know how to solve them and how to\\nunderstand the reasons behind those problems to assure you are not going to break anything?\\n\\n#### Brute force\\n\\nYeah, Knuth said once that \\"premature optimization\\" is the root of all evil\\",\\nso when you code you actually work about it working, which is fine actually\\n\\nIn that context you may use brute force algorithms, which is not a bad thing\\nbut at least when you finish ypu can ask any gpt (chat gpt, code whisper, copilot, etc)\\nhey, could optimize this thing?\\n\\nThe problem comes when you copy all your code and paste it and say literally to the tool\\n\\"hey make this better\\", and that is not how it works since gpts need context and detailed\\ninstructions. Also gpts are not perfect so they can hallucinate with your requests.\\n\\nSo you **ACTUALLY** need to know how to solve this problems or at least grasp the\\nfundamentals to guide your generative tools to help you.\\n\\nBut let me tell you something, computer science was born from math, and even if we\\ndo not take take in account the years humanity has spent studying math, this is not new age\\nscience, from Turin and Von Neumann to today, we got enough time to see repetitive problems\\nand patterns onto this problems, this the libraries we have now.\\n\\nTherefore, maybe you should not code doing all things via brute force, and could form the start\\nhaving at least moderate optimal code and if every other fellow programmer is doing the same,\\nwell all the page is going to perform nice instead of having a monster.\\n\\nBut, this is going to take more time, Actually..., no and yes.If you have never practiced\\nthese things, and never studied about algorithms and its design, well yeah, you have\\nto deliver functionality, so there is no time to learn now these things.\\n\\nI have a strong opinion about those people, is that they are not professional.\\n\\nOn the contrary, if you have studied those things, well you have one more point raised to\\nyour self-efficacy. You are actually familiar with the problems.\\n\\nSo everything is new, yes, but maybe there are parts of the problem that can be abstracted and\\nfind patterns on those mini-problems that you already have solved.\\n\\nIt takes a lot of time to master these, indeed. Not only practice but self-study of the theory.\\nAnd in a note apart, that is very frustrating and needs patience and dedication, try to be kind\\nto yourself.\\n\\n#### There is actually little change\\n\\nIf we read a book from 70s about programming we may find... hilarious, that much of\\nthat books is way still relevant, if not the same. Digital computers just are faster, more powerful\\nand smaller than in the past but their principles, in most cases, are the same as 50 years ago\\n\\nProblems software engineers have faced in the 70s are almost the same much enterprises face today\\neven with all devops change. Why? because we are doing things wrong, perhaps. Yet we have\\nneat solutions today that we can apply to solve those problems but everyone is too busy to\\ndo things right, again, maybe.\\n\\nYem there are new technology everyday oping around to shine solving new problems, right? Kinda, actually\\nthis new tech provides us new paradigms and automatization of some tasks and repetitive problems.\\nThis new tech may improve the speed we do things, but still the programmer\'s ability and\\nthe system design plays a important role in implementation. Packages can continue being improved, that\\nis why they have versions, code in repositories (if no one deletes it) is not going to, biological die\\nsome day and revert its status to version 0.0.1. But all your predecessors learned, when they die, that info\\nthat was in their brains, is being deleted for ever from there.\\n\\nThey could have written books and docs but you have to relearn everything from square 0, and there is\\na good chance that you are going to interpret that info in a different way than others and know\\nwe have in our hands a internet war in forums about \\"the correct way\\". Humans, right?\\n\\n### Boosting self-efficacy\\n\\nSo, in order to be more confident, you should study lots of things. Maybe you do not have enough time\\nand other people around you (strong word and opinion coming) is just too mediocre about their work.\\n\\nFor that reason, there should be a time to spare to learn the fundamentals by yourself. Even in\\nplaces that have elite educators, _students have to study_ a lot by themselves.\\n\\nThe more you know, the more confident in doing any task you are going to become since\\nyou are going to find parts of that requirement that are variations or other problems\\nyou already solved or at least if is something totally new there is a good chance\\nthat behind it there are principles that you already have review, so are going to be\\nfaster and faster (and maybe more comfortable and more comfortable)"}]}')}}]);